<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>socket.io 채팅</title>
    <!-- cdn -->
    <!-- 서버가 실행 중이지 않아도 클라이언트 라이브러리를 사용 할 수 있음. -->
    <!-- <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script> -->

    <!-- Socket.IO 서버가 제공하는 클라이언트 라이브러리 -->
    <!-- 서버에서 자동 제공됨. Socket.IO 서버가 실행 중일 때만 작동함. -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
    </script>

    <style>
        /* [실습 2] 채팅창 UI 만들기 */
        .chat-list {
            background-color: skyblue;
            height: 500px;
            padding: 10px;
            overflow-y: auto;
        }        

        .chat-list div {
            margin-top: 3px;
        }

        .chat-list div div {
            display: inline-block;
            padding: 3px;
        }

        .my-chat {
            text-align: right;
        }

        .my-chat div{
            background-color: yellow;
            border-radius: 5px 5px 0 5px;
        }

        .other-chat div{
            background-color: white;
            border-radius: 5px 5px 5px 0;
        }

        /* [실습 3] 채팅창 입장 안내 문구 */
        .notice {
            text-align: center;
            color: #333;
            font-size: 12px;
        }

        .d-none {
            display: none;
        }
        .timestamp{
          font-size: 0.7rem;
          color: gray;
          opacity: 0.5;
        }
    </style>
</head>
<body>
    <h1>My Chat</h1>

    <!-- [실습 1] 각 버튼을 누를 때 마다 서버로 메시지 보내기 -->
    <!-- <button onclick="sayHello()">Hello</button>
    <button onclick="saySutdy()">Study</button>
    <button onclick="sayBye()">Bye</button>
    <p id="from-server"></p> -->

    <!-- [실습 3-2] socket.id => nickname // 닉네임 입력 폼 -->
    <div class="entry-box">
        <input 
            type="text"
            id="nickname"
            placeholder="닉네임"
            autofocus
            onkeypress="if(window.event.keyCode==13){join()}" />
        <button type="button" onclick="join()">입장</button>
    </div>

    <!-- (참고) keyCode 아는 방법 -->
    <!-- <input type="text" id="myInput"> -->

    <!-- [실습 2] 채팅 UI 만들기. -->
    <main class="chat-box d-none">
        <div class="chat-list">
            <!-- <div class="my-chat">
                <div>user1 : msg1</div><span class="timestamp">시간</span>
            </div>
            <div class="other-chat">
                <div>user2 : msg2</div><span class="timestamp">시간</span>
            </div> -->
        </div>

        <!-- 메시지 전송 영역 -->
        <select id="nick-list"></select>에게
        <input 
            type="text"
            id="message"
            onkeypress="if(window.event.keyCode==13){send()}"
        />
        <button type="button" onclick="send()">전송</button>
            
    </main>


  <script>
    // (참고) keycode 아는 방법.
    // document.getElementById('myInput').addEventListener('keydown', (e) => {
    //     console.log('key down >>> ', e.keycode);
    // });


    let socket = io(); 
    // 소켓 사용을 위한 객체 생성.
    let myNick; // 내 닉네임 [실습 3-2-2]

    socket.on('connect', () => {
      console.log('클라이언트 연결 완료 ::', socket.id);
      // console.log(socket);
    })
    // (참고) 소켓 연결 완료.
    // [실습 1]
    // function sayHello() {
    //     socket.emit('hello', {who: 'client', msg: 'hello'})
    // }
    // socket.on('hellokr', (data) => {
    //     console.log("data >> ", data); // {who: 'hello', msg: '안녕!!!'}
    //     document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`
    // })
    // [실습 3] 채팅창 입장 안내 문구
    socket.on('notice', (msg) => {
      console.log(msg);
      document.querySelector('.chat-list').insertAdjacentHTML('beforeend', `<div class="notice">${msg}</div>`)  
      chatList.scrollTop = chatList.scrollHeight;
    })
    // insertAdjacentHTML vs innerHTML
    // insertAdjacentHTML : 삽입할 위치를 명시적으로 지정할 수 있음. 특정 위치에 HTML을 추가하려면 <-- 사용
    // (beforeend, beforebegin, afterbegin, afterend)
    // innerHTML : 요소의 전체 내용을 대체하게 됨. 요소의 내용을 한 번에 대체하거나 가져올 수 있음. 해당 요소의 내용을 변경.

    // [실습 3-2] 채팅창 입장 문구 socket.id -> nickname
    function join() {
      socket.emit('setNick', document.querySelector('#nickname').value);
    }

    // [실습 3-2-1] 채팅창 입장 문구 socket.id -> nickname
    // 닉네임 중복 --> alert 띄우기.
    socket.on('error', (data) => {
      alert(data);
    })

    // [실습 3-2-2]
    // 입장 성공 : 닉네임 입력창 비활성화
    socket.on('entrySuccess', (nick) => {
      myNick = nick; // 내 닉네임 저장
      console.log('myNick > ', myNick);
      document.querySelector('#nickname').disabled = true; // 인풋창 비활성화
      document.querySelector('.entry-box > button').disabled = true; // 버튼 비활성화
      document.querySelector('.chat-box').classList.remove('d-none'); // 채팅창 보이기
    })

    // [실습 3-2-3] 
    // 유저 목록 업데이트 (select 박스의 option 태그 개수 변경)
    socket.on('updateNicks', (nickObjs) => {
      
      // console.log("클라이언트 nickObjs >> ", nickObjs); // {PHjAHGtqmmo6oVVKAAAH: 'ㅇㅇㅇ'}
      let options = `<option value="all">전체</option>`
      const nickKeys = Object.keys(nickObjs);
      for (let optionNick in nickObjs) {
        if ( myNick !== nickObjs[optionNick] ) {
          options += `<option value="${optionNick}">${nickObjs[optionNick]}</option>`;
        }
      }
      document.querySelector('#nick-list').innerHTML=options;
    })
    function  send() {
      const data = {
        target : document.querySelector('#nick-list').value,
        myNick,
        msg : document.querySelector('#message').value,
      }
      socket.emit('send', data);
      document.querySelector('#message').value = ''; //input 초기화
    }
    socket.on('newMessage',(data)=>{
      let chatList = document.querySelector('.chat-list');
      let div = document.createElement('div');
      let divCHat = document.createElement('div');
      let divTimeSt = document.createElement('span');

      divTimeSt.classList.add('timestamp');
      divTimeSt.textContent += `${data.timeStamp}`;
      divCHat.textContent += `${data.nick} : ${data.msg}`;
      if(myNick === data.nick){
        div.append(divTimeSt);
        div.append(divCHat);
        div.classList.add('my-chat');
      }else{
        div.append(divCHat);
        div.append(divTimeSt);
        div.classList.add('other-chat');
      }
      chatList.append(div);
      chatList.scrollTop = chatList.scrollHeight;
    });
  </script>
</body>
</html>